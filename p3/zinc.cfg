zinc.cfg

/* a context-free grammar (cfg) description of the language zinc */

program	: globalList functionList ;

globalList : globalList variableDecl |   ;

functionList : functionList functionDecl | functionDecl ;

type : INT | BOOL ;

variableDecl : type identifier SEMICOLON
	     | type identifier LBRACKET intLiteral RBRACKET SEMICOLON
	     ;

functionDecl : VOID identifier parameters LBRACE varList stmtList RBRACE
	     | type identifier parameters LBRACE varList stmtList RBRACE
	     ;

parameters : LPAREN RPAREN | LPAREN paramList RPAREN ;

paramList : paramList COMMA param | param ;

param : type identifier
      | type identifier LBRACKET RBRACKET
      ;

varList :   | varList variableDecl ;

stmtList : stmtList stmt |   ;

stmt	: target ASSIGN expression SEMICOLON
	| PRINT LPAREN printList RPAREN SEMICOLON
	| IF LPAREN expression RPAREN stmt
	| IF LPAREN expression RPAREN stmt ELSE stmt
	| WHILE LPAREN expression RPAREN stmt
	| LBRACE varList stmtList RBRACE
	| RETURN SEMICOLON
	| RETURN expression SEMICOLON
	| identifier LPAREN RPAREN SEMICOLON
	| identifier LPAREN argList RPAREN SEMICOLON
        ;

argList	: argList COMMA expression | expression ;

printList : printList COMMA printItem | printItem ;

printItem : stringLiteral | expression ;

expression : ORexpression;

ORexpression : ORlist;
ORlist       : ORlist OR ANDexpression
             | ANDexpression
             ;

ANDexpression : ANDlist;
ANDlist       : ANDlist AND term
              | term
              ;

term	: factor LT  factor
	| factor GT  factor
	| factor LEQ factor
	| factor GEQ factor
	| factor EQ  factor
	| factor NEQ factor
	| factor
	;

factor	: factor PLUS  primary
	| factor MINUS primary
	| primary
	;

primary	: primary TIMES unit
	| primary SLASH unit
	| unit
	;

unit	: nameVar
	| arrayVar
	| intLiteral
	| MINUS intLiteral
	| identifier LPAREN RPAREN
	| identifier LPAREN argList RPAREN
	| TRUE
	| FALSE
	| LPAREN expression RPAREN
	;

nameVar : identifier ;

arrayVar : identifier LBRACKET expression RBRACKET ;

identifier : ID ;

intLiteral : INTLITERAL ;

stringLiteral : STRINGLITERAL ;

target	: identifier
	| identifier LBRACKET expression RBRACKET
	;
